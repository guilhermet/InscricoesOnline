@model InscricoesOnline.Models.Equipe

@{
    ViewBag.Title = "Inscricao";
}

<div class="container">
    <div class="x_panel">
        <div class="x_title">
            <h2>Cadastro de Equipe </h2>
            <div class="clearfix"></div>
        </div>
        <div class="x_content">
            <div class="stepContainer">
                <div id="step-1" class="content clearfix">
                    @using (Html.BeginForm("Equipe", "Home", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal form-label-left", @id = "form" }))
                    {
                        @Html.AntiForgeryToken()

                        @Html.HiddenFor(model => model.EventoId)
                        <div class="form-group">
                            <label class="control-label col-md-3 col-sm-3 col-xs-12">
                                Nome da Equipe
                            </label>
                            <div class="col-md-8 col-sm-6 col-xs-12">
                                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control col-md-7 col-xs-12" } })
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-3 col-sm-3 col-xs-12">
                                E-mail
                            </label>
                            <div class="col-md-5 col-sm-6 col-xs-12">
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control col-md-7 col-xs-12" } })
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-3 col-sm-3 col-xs-12">
                                Telefone
                            </label>
                            <div class="col-md-3 col-sm-6 col-xs-12">
                                @Html.EditorFor(model => model.Telefone, new { htmlAttributes = new { @class = "form-control col-md-7 col-xs-12 telefone" } })
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-3 col-sm-3 col-xs-12">
                                Login
                            </label>
                            <div class="col-md-3 col-sm-6 col-xs-12">
                                @Html.EditorFor(model => model.Login, new { htmlAttributes = new { @class = "form-control col-md-7 col-xs-12" } })
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="middle-name" class="control-label col-md-3 col-sm-3 col-xs-12">
                                Senha
                            </label>
                            <div class="col-md-3 col-sm-6 col-xs-12">
                                @Html.PasswordFor(model => model.Senha, new { @class = "form-control col-md-7 col-xs-12" })
                            </div>
                        </div>

                        <div class="panel-footer text-center">
                            @Html.ActionLink("Voltar", "Login", new { id = @Model.EventoId }, new { @class = "btn btn-default" })
                            <button type="submit" class="btn btn-success"><i class="fa fa-check-circle"></i> Salvar</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@section scripts{
    <script>

        //$(".telefone").mask("(99) 99999-9999");
        $('#form').formValidation({
            framework: '',
            err: {
                container: 'tooltip'
            },
            icon: {
                valid: 'fa fa-check',
                invalid: 'fa fa-times',
                validating: 'fa fa-refresh fa-spin'
            },
            fields: {
                Nome: {
                    validators: {
                        notEmpty: {
                            message: 'Campo obrigatório'
                        }
                    }
                },
                Email: {
                    validators: {
                        notEmpty: {
                            message: 'Campo obrigatório'
                        }
                    }
                },
                Telefone: {
                    validators: {
                        notEmpty: {
                            message: 'Campo obrigatório'
                        }
                    }
                },
                Login: {
                    validators: {
                        notEmpty: {
                            message: 'Campo obrigatório'
                        }
                    }
                },
                Senha: {
                    validators: {
                        notEmpty: {
                            message: 'Campo obrigatório'
                        }
                    }
                }
            }
        }).on('err.field.fv', function (e, data) {
            var $icon = data.element.data('fv.icon'),
                title = $icon.data('bs.tooltip').getTitle();

            $icon.tooltip('destroy').tooltip({
                html: true,
                placement: 'left',
                title: title,
                container: 'body'
            });
        });
    </script>
}