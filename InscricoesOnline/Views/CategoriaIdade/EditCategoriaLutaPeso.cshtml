@model InscricoesOnline.Models.CategoriaLutaPeso

@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div id="page-wrapper">
    <div class="row">
        <div class="col-lg-12">
            <h3 class="page-header">
                <small>
                    <a class="text-primary" href="@Url.Action("Index", "Admin")"><i class="fa fa-home fa-fw"></i>Início</a>
                    <span class="text-muted">/</span>
                    <span class="text-muted"><a class="text-primary" href="@Url.Action("Lista", "CategoriaIdade")">Categorias por idade</a></span>
                    <span class="text-muted">/</span>
                    <span class="text-muted"><a class="text-primary" href="@Url.Action("ListaCategoriaLutaPeso", "CategoriaIdade", new { id = Model.CategoriaIdadeId })">Categorias por peso - @Model.CategoriaIdade.Titulo</a></span>
                    <span class="text-muted">/</span>
                    <span class="text-muted">Edição</span>
                </small>
            </h3>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            @using (Html.BeginForm("EditCategoriaLutaPesoSalvar", "CategoriaIdade", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "panel panel-green fv-form fv-form-bootstrap", @id = "form-categoria-peso" }))
            {
                @Html.AntiForgeryToken()

                <header class="panel-heading">
                    <i class="fa fa-file-text-o"></i> Dados cadastrais
                </header>
                <div class="panel-body">
                    <div class="clearfix">
                        <div class="alert alert-danger pull-left">
                            <p>* Campos obrigatórios</p>
                        </div>
                    </div>

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.CategoriaIdadeId)

                    <div class="text-center">
                        @Html.CheckBoxFor(model => model.Ativo, new { @class = "chkAtivo hidden", @checked = "true" })
                    </div>

                    <div class="form-group">
                        <label for="txtDescricao"><span class="text-alerta">*</span> Descrição:</label>
                        @Html.EditorFor(model => model.Titulo, new { htmlAttributes = new { @class = "form-control", @id = "txtTitulo", maxlength = 50 } })
                    </div>

                    <div class="row">
                        <div class="form-group col-lg-3">
                            <label for="drpSexo"><span class="text-alerta">*</span> Sexo:</label>
                            @Html.DropDownListFor(model => model.Sexo, new SelectList(
                 new System.Collections.Generic.List<object>{
                            new {value = "M", sexo = "Masculino"},
                            new {value = "F", sexo = "Feminino"}
                 }, "value", "sexo", "Masculino"), new { @class = "form-control", @id = "drpSexo" })
                        </div>

                        <div class="form-group col-lg-3">
                            <label for="txtPesoInicial">Idade inicial (anos):</label>
                            @Html.EditorFor(model => model.PesoInicial, new { htmlAttributes = new { @class = "form-control text-right", @id = "txtPesoInicial" } })
                        </div>

                        <div class="form-group col-lg-3">
                            <label for="txtPesoFinal">Idade final (anos):</label>
                            @Html.EditorFor(model => model.PesoFinal, new { htmlAttributes = new { @class = "form-control text-right", @id = "txtPesoFinal" } })
                        </div>
                    </div>

                    <br />

                    <div class="panel-footer text-center">
                        <button type="submit" class="btn btn-success"><i class="fa fa-check-circle"></i> Salvar edição</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section scripts{
    <script>

        $("#txtPesoInicial").change(function () {
            if (parseInt($("#txtPesoFinal").val()) < parseInt($("#txtPesoInicial").val()))
                $("#txtPesoFinal").val($("#txtPesoInicial").val())

            $('#form-categoria-peso').formValidation('revalidateField', 'PesoFinal');
        });

        $('#form-categoria-peso').formValidation({
            framework: '',
            err: {
                container: 'tooltip'
            },
            icon: {
                valid: 'fa fa-check',
                invalid: 'fa fa-times',
                validating: 'fa fa-refresh fa-spin'
            },
            fields: {
                ModalidadeId: {
                    validators: {
                        notEmpty: {
                            message: 'Campo obrigatório'
                        }
                    }
                },
                Sexo: {
                    validators: {
                        notEmpty: {
                            message: 'Campo obrigatório'
                        }
                    }
                },
                Titulo: {
                    validators: {
                        notEmpty: {
                            message: 'Campo obrigatório'
                        }
                    }
                },
                IdadeInicial: {
                    validators: {
                        notEmpty: {
                            message: 'Campo obrigatorio'
                        },
                        greaterThan: {
                            message: "Idade deve ser maior que 0",
                            value: 0
                        }
                    }
                },
                PesoFinal: {
                    validators: {
                        notEmpty: {
                            message: 'Campo obrigatorio'
                        },
                        callback: {
                            message: 'O peso deve ser maior ou igual ao peso inicial',
                            callback: function (value, validator, $field) {
                                return ($("#txtPesoInicial").val() ? (value >= parseInt($("#txtPesoInicial").val())) : false);
                            },
                        }
                    }
                }
            }
        }).on('err.field.fv', function (e, data) {
            var $icon = data.element.data('fv.icon'),
                title = $icon.data('bs.tooltip').getTitle();

            $icon.tooltip('destroy').tooltip({
                html: true,
                placement: 'left',
                title: title,
                container: 'body'
            });
        });
    </script>
}