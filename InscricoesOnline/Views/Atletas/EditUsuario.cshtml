@model InscricoesOnline.Models.UsuarioSite

@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div id="page-wrapper">
    <div class="row">
        <div class="col-lg-12">
            <h3 class="page-header">
                <small>
                    <a class="text-primary" href="@Url.Action("Index", "Admin")"><i class="fa fa-home fa-fw"></i>Início</a>
                    <span class="text-muted">/</span>
                    <span class="text-muted"><a class="text-primary" href="@Url.Action("Lista", "Filiados")">Filiados</a></span>
                    <span class="text-muted">/</span>
                    <span class="text-muted text-capitalize"><a class="text-primary" href="@Url.Action("Visualizar", "Filiados", new { id = Model.FiliadoId })">@Model.Filiado.Nome.ToLower()</a></span>
                    <span class="text-muted">/</span>
                    <span class="text-muted">Usuário</span>
                </small>
            </h3>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            @using (Html.BeginForm("EditUsuarioSalvar", "Filiados", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-con panel panel-primary fv-form fv-form-bootstrap", @id = "form-fili", @enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                <header class="panel-heading">
                    <i class="fa fa-file-text-o"></i> Dados cadastrais
                </header>
                <div class="panel-body">
                    <div class="clearfix">
                        <div class="alert alert-danger pull-left">
                            <p>* Campos obrigatórios</p>
                        </div>
                    </div>

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.FiliadoId)
                    @Html.HiddenFor(model => model.DataCadastro)

                    <div class="text-center">
                        @Html.CheckBoxFor(model => model.Ativo, new { @class = "chkAtivo hidden", @checked = "true" })
                    </div>

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-group">
                        <label for="txtNome"><span class="text-alerta">*</span> Senha:</label>
                        @Html.PasswordFor(model => model.Senha, new { @class = "form-control", @maxlength = 30, @placeholder = "Digite somente se deseja alterar a senha" })
                    </div>

                    <div class="form-group">
                        <label for="txtDataFimInscricoes"><span class="text-alerta">*</span> Academias adicionais:</label>
                        <select class="form-control select2-offscreen" id="AcademiaId" name="AcademiaId" multiple>
                            @foreach (var academia in (IEnumerable<InscricoesOnline.Models.Academia>)ViewBag.AcademiaId)
                            {
                                <option value="@academia.Id"
                                        @(Model.UsuarioSiteAcademia.Select(m => m.AcademiaId).Contains(academia.Id) ? "selected" : "")>
                                    @academia.Nome
                                </option>
                            }
                        </select>

                        <input class="none" type="hidden" id="txtIdsAcademias" name="txtIdsAcademias" readonly="readonly">
                    </div>

                    <div style="clear: both" />
                    <div class="panel-footer text-center">
                        <button type="submit" class="btn btn-success"><i class="fa fa-check-circle"></i> Salvar edição</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section scripts{
    <script>

        $("#AcademiaId").select2();

        ValidaAcademias();

        $("#AcademiaId").change(function () {
            ValidaAcademias()
        });

        function ValidaAcademias() {
            $("#txtIdsAcademias").val("");

            var data = $('#AcademiaId').select2('data')
            var i = 0, ids = "";
            while (typeof data[i] !== 'undefined') {
                if (ids == "")
                    ids += data[i].id;
                else
                    ids += ',' + data[i].id;

                i++;
            }
            $("#txtIdsAcademias").val(ids);
        }

        $("#form-fili")
            .find('AcademiaId')
            .change(function (e) {
                $('#form-fili').formValidation('revalidateField', 'AcademiaId');
            })
            .end()

            .find('[name="DataNascimento"]')
            .change(function (e) {
                $('#form-fili').formValidation('revalidateField', 'DataNascimento');
            })
            .end()

            .formValidation({
                framework: '',
                err: {
                    container: 'tooltip'
                },
                excluded: [':disabled', ':hidden', ':not(:visible)', '.disabled'],
                icon: {
                    valid: "fa fa-check",
                    invalid: "fa fa-times",
                    validating: "fa fa-refresh fa-spin"
                },
                fields: {
                    RG: {
                        trigger: 'blur',
                        message: "Este RG já existe no sistema",
                        validators: {
                            remote: {
                                url: '/Filiados/ValidarRG/{rg}',
                                data: function (validator, $field, value) {
                                    return {
                                        rg: value,
                                        id: @(Model == null ? 0 : Model.Id),
                                    };
                                },
                                type: 'POST'
                            }
                        }
                    },
                    CPF: {
                        trigger: 'blur',
                        message: "Este CPF já existe no sistema",
                        validators: {
                            remote: {
                                url: '/Filiados/ValidarCPF/{cpf}',
                                data: function (validator, $field, value) {
                                    return {
                                        cpf: value,
                                        id: @(Model == null ? 0 : Model.Id),
                                    };
                                },
                                type: 'POST'
                            }
                        }
                    },
                    Nome: {
                        validators: {
                            notEmpty: {
                                message: 'Campo obrigatório'
                            }
                        }
                    },
                    'AcademiaId': {
                        validators: {
                            callback: {
                                message: 'Campo obrigatório',
                                callback: function (value, validator, $field) {
                                    return (value !== "");
                                }
                            }
                        }
                    },
                    'FaixaId': {
                        validators: {
                            notEmpty: {
                                message: 'Campo obrigatório'
                            }
                        }
                    },
                    DataNascimento: {
                        validators: {
                            date: {
                                format: 'DD/MM/YYYY',
                                message: 'Data inválida'
                            },
                            notEmpty: {
                                message: 'Campo obrigatório'
                            }
                        }
                    },
                    'Endereco.CEP': {
                        validators: {
                            notEmpty: {
                                message: "Campo obrigatório"
                            },
                        }
                    },
                    'Endereco.Logradouro': {
                        validators: {
                            notEmpty: {
                                message: "Campo obrigatório"
                            }
                        }
                    },
                    'Endereco.Numero': {
                        validators: {
                            notEmpty: {
                                message: "Campo obrigatório"
                            }
                        }
                    },
                    'Endereco.Cidade': {
                        validators: {
                            notEmpty: {
                                message: 'Campo obrigatório'
                            }
                        }
                    },
                    'Endereco.Estado': {
                        validators: {
                            notEmpty: {
                                message: 'Campo obrigatório'
                            }
                        }
                    },
                    EstadoCivil: {
                        validators: {
                            notEmpty: {
                                message: 'Campo obrigatório'
                            }
                        }
                    },
                    Sexo: {
                        validators: {
                            notEmpty: {
                                message: 'Campo obrigatório'
                            }
                        }
                    }
                }
            }).on('err.field.fv', function (e, data) {
                var $icon = data.element.data('fv.icon'),
                    title = $icon.data('bs.tooltip').getTitle();

                $icon.tooltip('destroy').tooltip({
                    html: true,
                    placement: 'left',
                    title: title,
                    container: 'body'
                });
            });

    </script>
}