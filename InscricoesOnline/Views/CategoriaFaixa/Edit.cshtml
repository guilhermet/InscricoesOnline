@model InscricoesOnline.Models.CategoriaFaixa

@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div id="page-wrapper">
    <div class="row">
        <div class="col-lg-12">
            <h3 class="page-header">
                <small>
                    <a class="text-primary" href="@Url.Action("Index", "Admin")"><i class="fa fa-home fa-fw"></i>Início</a>
                    <span class="text-muted">/</span>
                    <span class="text-muted"><a class="text-primary" href="@Url.Action("Lista", "CategoriaFaixa")">Categorias por faixa</a></span>
                    <span class="text-muted">/</span>
                    <span class="text-muted">Edição</span>
                </small>
            </h3>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            @using (Html.BeginForm("EditSalvar", "CategoriaFaixa", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "panel panel-primary fv-form fv-form-bootstrap", @id = "form-categoria-faixa" }))
            {
                @Html.AntiForgeryToken()

                <header class="panel-heading">
                    <i class="fa fa-file-text-o"></i> Dados cadastrais
                </header>
                <div class="panel-body">
                    <div class="clearfix">
                        <div class="alert alert-danger pull-left">
                            <p>* Campos obrigatórios</p>
                        </div>
                    </div>

                    <div class="text-center">
                        @Html.CheckBoxFor(model => model.Ativo, new { @class = "chkAtivo hidden", @checked = "true" })
                    </div>

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.EventoId)

                    <div class="form-group">
                        <label for="drpModalidade"><span class="text-alerta">*</span> Modalidade:</label>
                        @Html.DropDownList("ModalidadeId", null, htmlAttributes: new { @class = "form-control", @id = "drpModalidade" })
                    </div>

                    <div class="form-group">
                        <label for="txtTitulo"><span class="text-alerta">*</span> Descrição:</label>
                        @Html.EditorFor(model => model.Titulo, new { htmlAttributes = new { @class = "form-control", @id = "txtTitulo", maxlength = 50 } })
                    </div>

                    <div class="row">
                        <div class="form-group col-lg-6">
                            <label for="txtFaixaIdFaixaInicial">Faixa inicial:</label>
                            <select name="@Html.NameFor(model => model.FaixaIdFaixaInicial)"
                                    id="@Html.IdFor(model => model.FaixaIdFaixaInicial)"
                                    class="form-control">
                                @foreach (var faixa in (IEnumerable<InscricoesOnline.Models.Faixa>)ViewBag.Faixas)
                                {
                                    <option value="@faixa.Id"
                                            @(faixa.Id == Model.FaixaIdFaixaInicial ? "selected" : "")
                                            data-ordem="@faixa.Ordem">
                                        @faixa.Descricao
                                    </option>
                                }
                            </select>
                        </div>

                        <div class="form-group col-lg-6">
                            <label for="txtFaixaIdFaixaFinal">Faixa final:</label>
                            <select name="@Html.NameFor(model => model.FaixaIdFaixaFinal)"
                                    id="@Html.IdFor(model => model.FaixaIdFaixaFinal)"
                                    class="form-control">
                                @foreach (var faixa in (IEnumerable<InscricoesOnline.Models.Faixa>)ViewBag.Faixas)
                                {
                                    <option value="@faixa.Id"
                                            @(faixa.Id == Model.FaixaIdFaixaFinal ? "selected" : "")
                                            data-ordem="@faixa.Ordem">
                                        @faixa.Descricao
                                    </option>
                                }
                            </select>
                        </div>
                    </div>

                    <br />

                    <div class="panel-footer text-center">
                        <button type="submit" class="btn btn-success"><i class="fa fa-check-circle"></i> Salvar edição</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section scripts{
    <script>

        $("#FaixaIdFaixaInicial").change(function () {
            $('#form-categoria-faixa').formValidation('revalidateField', 'FaixaIdFaixaFinal');
        });

        $('#form-categoria-faixa').formValidation({
            framework: '',
            err: {
                container: 'tooltip'
            },
            icon: {
                valid: 'fa fa-check',
                invalid: 'fa fa-times',
                validating: 'fa fa-refresh fa-spin'
            },
            fields: {
                ModalidadeId: {
                    validators: {
                        notEmpty: {
                            message: 'Campo obrigatório'
                        }
                    }
                },
                Titulo: {
                    validators: {
                        notEmpty: {
                            message: 'Campo obrigatório'
                        }
                    }
                },
                FaixaIdFaixaInicial: {
                    validators: {
                        notEmpty: {
                            message: 'Campo obrigatorio'
                        }
                    }
                },
                FaixaIdFaixaFinal: {
                    validators: {
                        notEmpty: {
                            message: 'Campo obrigatorio'
                        },
                        callback: {
                            message: 'Faixa deve ser superior ou igual a faixa inicial',
                            callback: function (value, validator, $field) {
                                return ($("#FaixaIdFaixaFinal option:selected").data("ordem") >= $("#FaixaIdFaixaInicial option:selected").data("ordem"));
                            },
                        }
                    }
                }
            }
        }).on('err.field.fv', function (e, data) {
            var $icon = data.element.data('fv.icon'),
                title = $icon.data('bs.tooltip').getTitle();

            $icon.tooltip('destroy').tooltip({
                html: true,
                placement: 'left',
                title: title,
                container: 'body'
            });
        });
    </script>
}