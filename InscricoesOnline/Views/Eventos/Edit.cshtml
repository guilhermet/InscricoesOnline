@model InscricoesOnline.Models.Evento

@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div id="page-wrapper">
    <div class="row">
        <div class="col-lg-12">
            <h3 class="page-header">
                <small>
                    <a class="text-primary" href="@Url.Action("Index", "Admin")"><i class="fa fa-home fa-fw"></i>Início</a>
                    <span class="text-muted">/</span>
                    <span class="text-muted">Evento</span>
                </small>
            </h3>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            @using (Html.BeginForm("EditSalvar", "Eventos", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "panel panel-primary fv-form fv-form-bootstrap", @id = "form-eventos", @enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()

                <header class="panel-heading">
                    <i class="fa fa-file-text-o"></i> Dados cadastrais
                </header>
                <div class="panel-body">
                    <div class="clearfix">
                        <div class="alert alert-danger pull-left">
                            <p>* Campos obrigatórios</p>
                        </div>
                    </div>

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.Senha)

                    <div class="text-center">
                        @Html.CheckBoxFor(model => model.Ativo, new { @class = "chkAtivo hidden", @checked = "true" })
                    </div>

                    <div class="form-group">
                        <label for="txtTitulo"><span class="text-alerta">*</span> Título:</label>
                        @Html.EditorFor(model => model.Titulo, new { htmlAttributes = new { @class = "form-control", @maxlength = 60 } })
                    </div>

                    <div class="form-group">
                        <label for="txtDescricao"><span class="text-alerta">*</span> Descrição:</label>
                        @Html.TextAreaFor(model => model.Descricao, new { @class = "form-control" })
                    </div>

                    <div class="row">
                        <div class="form-group col-lg-3">
                            <label for="txtDataInicio"><span class="text-alerta">*</span> Data inicial do evento:</label>
                            <div class="input-group date" id="txtDataInicio">
                                @Html.EditorFor(model => model.DataInicio, new { htmlAttributes = new { @class = "form-control text-center", @id = "txtData" } })
                                <span class="input-group-addon"><span class="fa fa-calendar"></span></span>
                            </div>
                        </div>

                        <div class="form-group col-lg-3">
                            <label for="txtDataFim"><span class="text-alerta">*</span> Data final do evento:</label>
                            <div class="input-group date" id="txtDataFim">
                                @Html.EditorFor(model => model.DataFim, new { htmlAttributes = new { @class = "form-control text-center data" } })
                                <span class="input-group-addon"><span class="fa fa-calendar"></span></span>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label><span class="text-alerta">*</span> UF:</label>
                        @Html.DropDownListFor(model => model.Estado, new SelectList(new System.Collections.Generic.List<object> { }), new { @class = "form-control", @id = "drpEstado", @name = "drpEstado", @value = Model.Estado })
                    </div>

                    <div class="form-group">
                        <label><span class="text-alerta">*</span> Cidade:</label>
                        @Html.DropDownListFor(model => model.Cidade, new SelectList(new System.Collections.Generic.List<object> { }), new { @class = "form-control", @id = "drpCidade", @name = "drpCidade", @value = Model.Cidade })
                    </div>

                    <div class="form-group">
                        <label for="txtLocal"> Local:</label>
                        @Html.EditorFor(model => model.Local, new { htmlAttributes = new { @class = "form-control", @maxlength = "120" } })
                    </div>

                    <div class="form-group">
                        <fieldset>
                            <legend class="text-primary pad-top-15">Inscrições</legend>

                            <div class="form-group">
                                <label for="txtAtivarInscricao">Habilitar ficha de inscrição:</label>
                                <br />
                                @Html.CheckBoxFor(model => model.AtivaInscricao, new { @class = "chkAtivo hidden ativaData", @checked = "true" })
                            </div>

                            <br />

                            <div class="row">
                                <div class="form-group col-lg-3">
                                    <label for="txtDataInicioInscricoes"><span class="text-alerta">*</span> Data de inicio:</label>
                                    <div class="input-group date" id="txtDataInicioInscricoes">
                                        @Html.EditorFor(model => model.DataInicioInscricoes, new { htmlAttributes = new { @class = "form-control text-center data" } })
                                        <span class="input-group-addon"><span class="fa fa-calendar"></span></span>
                                    </div>
                                </div>

                                <div class="form-group col-lg-3">
                                    <label for="txtDataFimInscricoes"><span class="text-alerta">*</span> Data de encerramento:</label>
                                    <div class="input-group date" id="txtDataFimInscricoes">
                                        @Html.EditorFor(model => model.DataFimInscricoes, new { htmlAttributes = new { @class = "form-control text-center data" } })
                                        <span class="input-group-addon"><span class="fa fa-calendar"></span></span>
                                    </div>
                                </div>

                                <div class="form-group col-lg-3">
                                    <label for="txtDataFimAlteracoes"><span class="text-alerta">*</span> Data de encer. das alterações:</label>
                                    <div class="input-group date" id="txtDataFimAlteracoes">
                                        @Html.EditorFor(model => model.DataFimAlteracoes, new { htmlAttributes = new { @class = "form-control text-center data" } })
                                        <span class="input-group-addon"><span class="fa fa-calendar"></span></span>
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                    </div>

                    <div class="panel-footer text-center">
                        <button type="submit" class="btn btn-success"><i class="fa fa-check-circle"></i> Salvar edição</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section scripts{
    <script>   

        $('#txtDataInicio')
            .on('dp.change', function (e) {
                $('#form-eventos').formValidation('revalidateField', 'Evento.DataInicio');
            });

        $('#txtDataFim')
            .on('dp.change', function (e) {
                $('#form-eventos').formValidation('revalidateField', 'Evento.DataFim');
            });

        $('#txtDataInicioInscricoes')
            .on('dp.change', function (e) {
                $('#form-eventos').formValidation('revalidateField', 'Evento.DataInicioInscricoes');
            });

        $('#txtDataFimInscricoes')
            .on('dp.change', function (e) {
                $('#form-eventos').formValidation('revalidateField', 'Evento.DataFimInscricoes');
            });

        $('#txtDataFimAlteracoes')
            .on('dp.change', function (e) {
                $('#form-eventos').formValidation('revalidateField', 'Evento.DataFimAlteracoes');
            });

        $(".ativaData").change(function () {
            $('#form-eventos').formValidation('revalidateField', 'Evento.DataInicioInscricoes');
            $('#form-eventos').formValidation('revalidateField', 'Evento.DataFimInscricoes');
            $('#form-eventos').formValidation('revalidateField', 'Evento.DataFimAlteracoes');
            $('#form-eventos').formValidation('revalidateField', 'ModalidadesId');
        });

        $('#ModalidadesId').change(function (e) {
            $('#form-eventos').formValidation('revalidateField', 'ModalidadesId');
        });

        $('#form-eventos').formValidation({
            framework: '',
            err: {
                container: 'tooltip'
            },
            icon: {
                valid: 'fa fa-check',
                invalid: 'fa fa-times',
                validating: 'fa fa-refresh fa-spin'
            },
            fields: {
                'Evento.Titulo': {
                    validators: {
                        notEmpty: {
                            message: 'Campo obrigatório'
                        }
                    }
                },
                'Evento.TipoEventoId': {
                    validators: {
                        notEmpty: {
                            message: 'Campo obrigatório'
                        }
                    }
                },
                'Evento.DataInicio': {
                    validators: {
                        date: {
                            format: 'DD/MM/YYYY',
                            message: 'Data inválida'
                        },
                        notEmpty: {
                            message: 'Campo obrigatório'
                        }
                    }
                },
                'Evento.DataFim': {
                    validators: {
                        date: {
                            format: 'DD/MM/YYYY',
                            message: 'Data inválida'
                        },
                        notEmpty: {
                            message: 'Campo obrigatório'
                        }
                    }
                },
                'Evento.DataInicioInscricoes': {
                    validators: {
                        callback: {
                            message: 'Campo obrigatório',
                            callback: function (value, validator, $field) {
                                return ($('.ativaData').is(":checked") ? (value !== '') : true);
                            },
                        }
                    }
                },
                'Evento.DataFimInscricoes': {
                    validators: {
                        callback: {
                            message: 'Campo obrigatório',
                            callback: function (value, validator, $field) {
                                return ($('.ativaData').is(":checked") ? (value !== '') : true);
                            }
                        }
                    }
                },
                'Evento.DataFimAlteracoes': {
                    validators: {
                        callback: {
                            message: 'Campo obrigatório',
                            callback: function (value, validator, $field) {
                                return ($('.ativaData').is(":checked") ? (value !== '') : true);
                            }
                        }
                    }
                },
                ModalidadesId: {
                    validators: {
                        callback: {
                            message: 'Campo obrigatório',
                            callback: function (value, validator, $field) {
                                return ($('.ativaData').is(":checked") ? ($("#txtIdsModalidades").val() !== "") : true);
                            }
                        }
                    }
                }
            }
        }).on('err.field.fv', function (e, data) {
            var $icon = data.element.data('fv.icon'),
                title = $icon.data('bs.tooltip').getTitle();

            $icon.tooltip('destroy').tooltip({
                html: true,
                placement: 'left',
                title: title,
                container: 'body'
            });
        });

    </script>
}